!function(e,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{var i=r();for(var n in i)("object"==typeof exports?exports:e)[n]=i[n]}}(global,(()=>(()=>{"use strict";const e=require("electron"),r={ipcRenderer:{sendMessage(r,...i){e.ipcRenderer.send(r,...i)},on(r,i){const n=(e,...r)=>i(...r);return e.ipcRenderer.on(r,n),()=>{e.ipcRenderer.removeListener(r,n)}},once(r,i){e.ipcRenderer.once(r,((e,...r)=>i(...r)))},getServices:()=>e.ipcRenderer.invoke("get-services"),getServiceById:r=>e.ipcRenderer.invoke("get-service",r),addService:(r,i,n,c)=>e.ipcRenderer.invoke("add-service",r,i,n,c),updateService:(r,i,n,c,d,s)=>e.ipcRenderer.invoke("update-service",r,i,n,c,d,s),getPersons:()=>e.ipcRenderer.invoke("get-persons"),getServiceTypes:()=>e.ipcRenderer.invoke("get-service-types"),addPerson:r=>e.ipcRenderer.invoke("add-person",r),addServiceType:r=>e.ipcRenderer.invoke("add-service-type",r),addServiceMessage:(r,i)=>e.ipcRenderer.invoke("add-service-message",r,i),getServiceMessages:r=>e.ipcRenderer.invoke("get-service-messages",r)}};return e.contextBridge.exposeInMainWorld("electron",r),{}})()));
//# sourceMappingURL=preload.js.map