{"version":3,"file":"preload.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,QAAQ,I,mBCTX,MAAM,EAA+BC,QAAQ,YCIvCC,EAAkB,CACtBC,YAAa,CAEX,WAAAC,CAAYC,KAAsBC,GAChC,EAAAH,YAAYI,KAAKF,KAAYC,EAC/B,EAGA,EAAAE,CAAGH,EAAmBI,GACpB,MAAMC,EAAe,CAACC,KAA6BL,IACjDG,KAAQH,GAGV,OAFA,EAAAH,YAAYK,GAAGH,EAASK,GAEjB,KACL,EAAAP,YAAYS,eAAeP,EAASK,EAAa,CAErD,EAGA,IAAAG,CAAKR,EAAmBI,GACtB,EAAAN,YAAYU,KAAKR,GAAS,CAACM,KAAWL,IAASG,KAAQH,IACzD,EACAQ,YAAa,IAAM,EAAAX,YAAYY,OAAO,gBACtCC,eAAiBC,GACf,EAAAd,YAAYY,OAAO,cAAeE,GACpCC,WAAY,CACVC,EACAC,EACAC,EACAC,IAEA,EAAAnB,YAAYY,OACV,cACAI,EACAC,EACAC,EACAC,GAEJC,cAAe,CACbN,EACAE,EACAC,EACAI,EACAH,EACAC,IAEA,EAAAnB,YAAYY,OACV,iBACAE,EACAE,EACAC,EACAI,EACAH,EACAC,GAEJG,WAAY,IAAM,EAAAtB,YAAYY,OAAO,eACrCW,gBAAiB,IAAM,EAAAvB,YAAYY,OAAO,qBAC1CY,UAAYR,GAAiB,EAAAhB,YAAYY,OAAO,aAAcI,GAC9DS,eAAiBT,GACf,EAAAhB,YAAYY,OAAO,mBAAoBI,GACzCU,kBAAmB,CAACC,EAAcb,IAChC,EAAAd,YAAYY,OAAO,sBAAuBe,EAAMb,GAClDc,mBAAqBd,GACnB,EAAAd,YAAYY,OAAO,uBAAwBE,K,OAIjD,EAAAe,cAAcC,kBAAkB,WAAY/B,G","sources":["webpack://electron-react-boilerplate/webpack/universalModuleDefinition","webpack://electron-react-boilerplate/external node-commonjs \"electron\"","webpack://electron-react-boilerplate/./src/main/preload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';\n\nexport type Channels = 'get-services' | 'add-service' | 'ipc-example';\n\nconst electronHandler = {\n  ipcRenderer: {\n    // Send message to main process\n    sendMessage(channel: Channels, ...args: unknown[]) {\n      ipcRenderer.send(channel, ...args);\n    },\n\n    // Listen for messages from the main process\n    on(channel: Channels, func: (...args: unknown[]) => void) {\n      const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n        func(...args);\n      ipcRenderer.on(channel, subscription);\n\n      return () => {\n        ipcRenderer.removeListener(channel, subscription);\n      };\n    },\n\n    // Listen for a message from the main process only once\n    once(channel: Channels, func: (...args: unknown[]) => void) {\n      ipcRenderer.once(channel, (_event, ...args) => func(...args));\n    },\n    getServices: () => ipcRenderer.invoke('get-services'),\n    getServiceById: (serviceId: number) =>\n      ipcRenderer.invoke('get-service', serviceId),\n    addService: (\n      name: string,\n      description: string,\n      personIds: number[],\n      serviceTypeIds: number[],\n    ) =>\n      ipcRenderer.invoke(\n        'add-service',\n        name,\n        description,\n        personIds,\n        serviceTypeIds,\n      ),\n    updateService: (\n      serviceId: number,\n      name: string,\n      description: string,\n      status: string,\n      personIds: number[],\n      serviceTypeIds: number[],\n    ) =>\n      ipcRenderer.invoke(\n        'update-service',\n        serviceId,\n        name,\n        description,\n        status,\n        personIds,\n        serviceTypeIds,\n      ),\n    getPersons: () => ipcRenderer.invoke('get-persons'),\n    getServiceTypes: () => ipcRenderer.invoke('get-service-types'),\n    addPerson: (name: string) => ipcRenderer.invoke('add-person', name),\n    addServiceType: (name: string) =>\n      ipcRenderer.invoke('add-service-type', name),\n    addServiceMessage: (text: string, serviceId: number) =>\n      ipcRenderer.invoke('add-service-message', text, serviceId),\n    getServiceMessages: (serviceId: number) =>\n      ipcRenderer.invoke('get-service-messages', serviceId),\n  },\n};\n\ncontextBridge.exposeInMainWorld('electron', electronHandler);\n\nexport type ElectronHandler = typeof electronHandler;\n"],"names":["root","factory","exports","module","define","amd","a","i","global","require","electronHandler","ipcRenderer","sendMessage","channel","args","send","on","func","subscription","_event","removeListener","once","getServices","invoke","getServiceById","serviceId","addService","name","description","personIds","serviceTypeIds","updateService","status","getPersons","getServiceTypes","addPerson","addServiceType","addServiceMessage","text","getServiceMessages","contextBridge","exposeInMainWorld"],"sourceRoot":""}